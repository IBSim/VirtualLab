import sys
sys.dont_write_bytecode=True
import os
import numpy as np
import time
from Utilitai import partition

import AsterFunc

SimDict = AsterFunc.GetSimDict()
Parameters = SimDict['Parameters']

'''
Steady state version of HIVE simulation for AMAZE component with mechanical
stresses from thermal expansion.
'''

DEBUT(PAR_LOT = 'NON',LANG='EN')

# ==============================================================================
# Read in the mesh and define model
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=20)

Thermod = AFFE_MODELE(AFFE=_F(MODELISATION=(Parameters.Model),
                              PHENOMENE='THERMIQUE',
                              TOUT='OUI'),
                      MAILLAGE=mesh)

Mechmod = AFFE_MODELE(AFFE=_F(MODELISATION=('3D'),
                              PHENOMENE='MECANIQUE',
                              TOUT='OUI'),
                      MAILLAGE=mesh)

# ==============================================================================
# Define functions for NL material properties and assign materials to parts
DictMat = AsterFunc.MaterialProps(SimDict['MATERIAL_DIR'],Parameters.Materials.values())
Properties = ['Youngs','PoisRat','Alpha','RhoCp','Lambda']

# Block materials
BlkM = [None]*len(Properties)
for i,prop in enumerate(Properties):
    BlkM[i] = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='CONSTANT',
                            PROL_GAUCHE='CONSTANT',
                           VALE=DictMat[Parameters.Materials['Block']][prop])

BlkMch = DEFI_MATERIAU(ELAS_FO=_F(E=BlkM[0], NU=BlkM[1], ALPHA=BlkM[2],
                                  TEMP_DEF_ALPHA=Parameters.TempExt))
BlkThm = DEFI_MATERIAU(THER_NL=_F(LAMBDA=BlkM[4], RHO_CP=BlkM[3]))

# Tile materials
TleM = [None]*len(Properties)
for i,prop in enumerate(Properties):
    TleM[i] = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='CONSTANT',
                            PROL_GAUCHE='CONSTANT',
                           VALE=DictMat[Parameters.Materials['Tile']][prop])

TleMch = DEFI_MATERIAU(ELAS_FO=_F(E=TleM[0], NU=TleM[1], ALPHA=TleM[2],
                                  TEMP_DEF_ALPHA=Parameters.TempExt))
TleThm = DEFI_MATERIAU(THER_NL=_F(LAMBDA=TleM[4], RHO_CP=TleM[3]))

# Pipe materials
PpeM = [None]*len(Properties)
for i,prop in enumerate(Properties):
    PpeM[i] = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='CONSTANT',
                            PROL_GAUCHE='CONSTANT',
                           VALE=DictMat[Parameters.Materials['Pipe']][prop])

PpeMch = DEFI_MATERIAU(ELAS_FO=_F(E=PpeM[0], NU=PpeM[1], ALPHA=PpeM[2],
                                TEMP_DEF_ALPHA=Parameters.TempExt))
PpeThm = DEFI_MATERIAU(THER_NL=_F(LAMBDA=PpeM[4], RHO_CP=PpeM[3]))

# Thermal materials
Thermat = AFFE_MATERIAU(AFFE=(_F(MATER=TleThm, GROUP_MA='Tile'),
                              _F(MATER=PpeThm, GROUP_MA='Pipe'),
                              _F(MATER=BlkThm, GROUP_MA='Block')),
                        MODELE=Mechmod)

# ==============================================================================
# Create boundary conditions

# Cooling due to coolant. HTC data generated during PreAster
HTdata = np.fromfile(SimDict['HTData'],dtype=float,count=-1,sep=" ")
# Change flux to negative for energy to leave sample
HTdata[1::2] = -HTdata[1::2]
# Although Linear extension is incorrect with it set to constant non-convergence
# issues are faced due to sudden gradient change
PipeFlux = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='LINEAIRE',
                            PROL_GAUCHE='LINEAIRE',
                            VALE=HTdata)

PipeHTC = AFFE_CHAR_THER_F(FLUX_NL=_F(FLUN=PipeFlux,GROUP_MA='PipeFace'),
                             MODELE=Thermod)

Loading = [_F(CHARGE=PipeHTC)] # List of boundary conditions applied


# Heat transfer between joins. TCC - Thermal Contact Conductance
# As TCC goes to infiity behaviour moves towards perfect heat exchange
group_names = [tup[0] for tup in mesh.LIST_GROUP_MA()]

# Tile-Block join
if 'ContactTB' in group_names:
    if getattr(Parameters,'TileBlockTCC',None) != None:
        # Imperfect heat exchange.
        Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                                ECHANGE_PAROI=_F(GROUP_MA_1='ContactTB',
                                                GROUP_MA_2='ContactTB_double',
                                                COEF_H=Parameters.TileBlockTCC))
    else:
        #Perfect heat exchange
        Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                                LIAISON_MAIL=_F(GROUP_MA_MAIT='Block',
                                                GROUP_MA_ESCL='ContactTB_double'))
    Loading.append(_F(CHARGE=Con_TB))


#Block-Pipe join
if 'ContactBP' in group_names:
    if getattr(Parameters,'BlockPipeTCC',None) != None:
        Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                                ECHANGE_PAROI=_F(GROUP_MA_1='ContactBP',
                                                GROUP_MA_2='ContactBP_double',
                                                COEF_H=Parameters.BlockPipeTCC))
    else:
        Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                                LIAISON_MAIL=_F(GROUP_MA_MAIT='Pipe',
                                                GROUP_MA_ESCL='ContactBP_double'))
    Loading.append(_F(CHARGE=Con_BP))

# Thermal load
EMI = AFFE_CHAR_THER(FLUX_REP=_F(FLUN=Parameters.Flux, GROUP_MA='CoilFace'),MODELE=Thermod)
Loading.append(_F(CHARGE=EMI))

# Radiation effects
TileEmissivity = getattr(Parameters,'TileEmissivity',0)
BlockEmissivity = getattr(Parameters,'BlockEmissivity',0)
if TileEmissivity!=0 or BlockEmissivity!=0:
    Radiation = []
    if TileEmissivity:
        Radiation.append(_F(GROUP_MA='TileExternal',
                        SIGMA=5.67e-8,
                        EPSILON=TileEmissivity,
                        TEMP_EXT=Parameters.TempExt))
    if BlockEmissivity:
        Radiation.append(_F(GROUP_MA='BlockExternal',
                        SIGMA=5.67e-8,
                        EPSILON=BlockEmissivity,
                        TEMP_EXT=Parameters.TempExt))

    Radiat = AFFE_CHAR_THER(MODELE=Thermod,
                            RAYONNEMENT=Radiation)
    Loading.append(_F(CHARGE=Radiat))



# ==============================================================================
# Thermal analysis
# Provide default values for certain parameters
# Solver: Which solver to use
# NewtonUpdate: After how many iterations the tangent matrix is updated. Calculating
# the tangent is computationally expsnive, therefore this is defaulted to 3.
# MaxIter: Max. number of iterations of the newton algorithm
Solver = getattr(Parameters,'Solver', 'MUMPS')
NewtonUpdate = getattr(Parameters,'NewtonUpdate',1)
_MaxIter = 20 if NewtonUpdate == 0 else 20*NewtonUpdate
MaxIter = getattr(Parameters,'MaxIter',_MaxIter)

# Steady state analysis
# Set initial temperature as the coolant temperature to speed up convergence
resther = THER_NON_LINE(CHAM_MATER=Thermat,
                        EXCIT=Loading,
                        MODELE=Thermod,
                        SOLVEUR=_F(METHODE=Solver),
                        ETAT_INIT=_F(STATIONNAIRE='OUI',VALE=Parameters.Coolant['Temperature']),
                        NEWTON=_F(REAC_ITER=NewtonUpdate),
                        CONVERGENCE=_F(ITER_GLOB_MAXI=MaxIter))

# ==============================================================================
# Save results
DEFI_FICHIER(FICHIER='./REPE_OUT/Thermal.rmed',
             TYPE='BINARY',
             UNITE=80)

IMPR_RESU(RESU=_F(RESULTAT=resther,
                  NOM_CHAM='TEMP',
                  NOM_CHAM_MED='Temperature'),
          UNITE=80)


# ==============================================================================
# Mechanical materials
# Material is asigned here as temperature field is needed
Mechmat = AFFE_MATERIAU(AFFE=(_F(MATER=TleMch, GROUP_MA='Tile'),
                              _F(MATER=PpeMch, GROUP_MA='Pipe'),
                              _F(MATER=BlkMch, GROUP_MA='Block')),
                        AFFE_VARC=_F(EVOL=resther,
                                     NOM_VARC='TEMP',
                                     VALE_REF=Parameters.TempExt),
                        MODELE=Mechmod)

# Mechanical BC using 3-2-1 method to constrain. Both pipe ends are constrained

Fix321 = AFFE_CHAR_MECA(FACE_IMPO=_F(DY=0.0, GROUP_MA=('PipeIn','PipeOut')), #Pipe runs along y axis
                        DDL_IMPO=(_F(DX=0.0, DZ=0.0, GROUP_NO=('PipeInV2','PipeOutV2')),
                                  _F(DX=0.0, GROUP_NO=('PipeInV1', 'PipeOutV1'))),
                    #    LIAISON_MAIL=(_F(GROUP_MA_MAIT='Pipe', GROUP_MA_ESCL='ContactBP_double'),
                    #                  _F(GROUP_MA_MAIT='Block', GROUP_MA_ESCL='ContactTB_double')),
                        MODELE=Mechmod)

# Mechanical analysis
ResMech = MECA_STATIQUE(CHAM_MATER=Mechmat,
                     EXCIT=(_F(CHARGE=Fix321)),
                     MODELE=Mechmod,
                     SOLVEUR=_F(METHODE=Solver,RESI_RELA=1.E-05))

# Get strain and equivalent stresses
CALC_CHAMP(reuse=ResMech,
               EXCIT=(_F(CHARGE=Fix321)),
               CRITERES=('SIEQ_ELGA','SIEQ_NOEU'),
               DEFORMATION=('EPSI_ELGA'),
               RESULTAT=ResMech)

IMPR_RESU(RESU=_F(RESULTAT=ResMech,
                  NOM_CHAM=('DEPL','SIEF_ELGA','EPSI_ELGA','SIEQ_ELGA','SIEQ_NOEU'),
                  NOM_CHAM_MED=('Displacement','Stress','Strain','Stress_Eq','Stress_Eq_Nd')),
          UNITE=80)

FIN()
