import sys
sys.dont_write_bytecode=True
import os
import numpy as np

import AsterFunc

SimDict = AsterFunc.GetSimDict()
Parameters = SimDict['Parameters']

'''
Steady state analysis of monoblock component .
'''

DEBUT(PAR_LOT = 'NON',LANG='EN')

# ==============================================================================
# Read in the mesh and define model
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     NOM_MED="Sample",
                     UNITE=20)

Thermod = AFFE_MODELE(AFFE=_F(MODELISATION=(Parameters.Model),
                          PHENOMENE='THERMIQUE',
                          TOUT='OUI'),
                           MAILLAGE=mesh)

# ==============================================================================
# Define functions for NL material properties and assign materials to parts
DictMat = AsterFunc.MaterialProps(SimDict['MATERIAL_DIR'],Parameters.Materials.values())

BlockRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                         PROL_DROITE='CONSTANT',
                         PROL_GAUCHE='CONSTANT',
                         VALE=DictMat[Parameters.Materials['Block']]["RhoCp"])
BlockLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='CONSTANT',
                            PROL_GAUCHE='CONSTANT',
                            VALE=DictMat[Parameters.Materials['Block']]["Lambda"])
BlockMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=BlockLAM,
                                    RHO_CP=BlockRCP))

PipeRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                           PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Pipe']]["RhoCp"])
PipeLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                        PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Pipe']]["Lambda"])
PipeMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=PipeLAM,
                                   RHO_CP=PipeRCP))

TileRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                        PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Tile']]["RhoCp"])
TileLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                           PROL_DROITE='CONSTANT',
                           PROL_GAUCHE='CONSTANT',
                           VALE=DictMat[Parameters.Materials['Tile']]["Lambda"])
TileMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=TileLAM,
                                   RHO_CP=TileRCP))

Thermat = AFFE_MATERIAU(AFFE=(_F(MATER=TileMat, GROUP_MA='Tile'),
                              _F(MATER=PipeMat, GROUP_MA='Pipe'),
                              _F(MATER=BlockMat, GROUP_MA='Block')),
                        MAILLAGE=mesh)

# ==============================================================================
# Create coundary conditions

# Thermal load (from ERMES)
ERMES = np.load(SimDict['EMData'])
Load_EM = []
for i,JH in enumerate(ERMES):
    Load_EM.append((_F(GROUP_MA="_{}".format(i),SOUR=JH)))
EMI = AFFE_CHAR_THER(SOURCE = Load_EM, MODELE=Thermod)

# Cooling due to coolant. HTC data generated during PreAster
HTdata = np.fromfile(SimDict['HTData'],dtype=float,count=-1,sep=" ")
# Change flux to negative for energy to leave sample
HTdata[1::2] = -HTdata[1::2]
PipeFlux = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='LINEAIRE',
                            PROL_GAUCHE='LINEAIRE',
                            VALE=HTdata)

PipeHTC = AFFE_CHAR_THER_F(FLUX_NL=_F(FLUN=PipeFlux,GROUP_MA='PipeFace'),
                             MODELE=Thermod)

# Heat transfer between joins. TCC - Thermal Contact Conductance
# As TCC goes to infiity behaviour moves towards perfect heat exchange
# Tile-Block join
if getattr(Parameters,'TileBlockTCC',None) != None:
    # Imperfect heat exchange.
    Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                            ECHANGE_PAROI=_F(GROUP_MA_1='ContactTB',
                                             GROUP_MA_2='ContactTB_double',
                                             COEF_H=Parameters.TileBlockTCC))
else:
    #Perfect heat exchange
    Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                            LIAISON_MAIL=_F(GROUP_MA_MAIT='Tile',
                                             GROUP_MA_ESCL='ContactTB'))

#Block-Pipe join
if getattr(Parameters,'BlockPipeTCC',None) != None:
    Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                            ECHANGE_PAROI=_F(GROUP_MA_1='ContactBP',
                                             GROUP_MA_2='ContactBP_double',
                                             COEF_H=Parameters.BlockPipeTCC))
else:
    Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                            LIAISON_MAIL=_F(GROUP_MA_MAIT='Block',
                                             GROUP_MA_ESCL='ContactBP'))
# List of boundary conditions applied
Loading = [_F(CHARGE=EMI),_F(CHARGE=PipeHTC),_F(CHARGE=Con_TB),_F(CHARGE=Con_BP)]

# Radiation effects
TileEmissivity = getattr(Parameters,'TileEmissivity',0)
BlockEmissivity = getattr(Parameters,'BlockEmissivity',0)
if TileEmissivity!=0 or BlockEmissivity!=0:
    Radiation = []
    if TileEmissivity:
        Radiation.append(_F(GROUP_MA='TileExternal',
                        SIGMA=5.67e-8,
                        EPSILON=TileEmissivity,
                        TEMP_EXT=Parameters.TempExt))
    if BlockEmissivity:
        Radiation.append(_F(GROUP_MA='BlockExternal',
                        SIGMA=5.67e-8,
                        EPSILON=BlockEmissivity,
                        TEMP_EXT=Parameters.TempExt))

    Radiat = AFFE_CHAR_THER(MODELE=Thermod,
                            RAYONNEMENT=Radiation)
    Loading.append(_F(CHARGE=Radiat))

# ==============================================================================
# Thermal analysis
# Provide default values for certain parameters
# Solver: Which solver to use
# NewtonUpdate: After how many iterations the tangent matrix is updated. Calculating
# the tangent is computationally expsnive, therefore this is defaulted to 3.
# MaxIter: Max. number of iterations of the newton algorithm
Solver = getattr(Parameters,'Solver', 'MUMPS')
NewtonUpdate = getattr(Parameters,'NewtonUpdate',3)
_MaxIter = 50 if NewtonUpdate == 0 else 10*NewtonUpdate
MaxIter = getattr(Parameters,'MaxIter',_MaxIter)

# Steady state analysis
# Set initial temperature as the coolant temperature to speed up convergence
resther = THER_NON_LINE(CHAM_MATER=Thermat,
                        EXCIT=Loading,
                        MODELE=Thermod,
                        SOLVEUR=_F(METHODE=Solver),
                        ETAT_INIT=_F(STATIONNAIRE='OUI',VALE=Parameters.Coolant['Temperature']),
                        NEWTON=_F(REAC_ITER=NewtonUpdate),
                        CONVERGENCE=_F(ITER_GLOB_MAXI=MaxIter))

# ==============================================================================
# Save results
DEFI_FICHIER(FICHIER='./REPE_OUT/Thermal.rmed',
             TYPE='BINARY',
             UNITE=80)

IMPR_RESU(RESU=_F(RESULTAT=resther,
                  NOM_CHAM='TEMP',
                  NOM_CHAM_MED='Temperature'),
          UNITE=80)

FIN()
