import sys
sys.dont_write_bytecode=True
import os
import numpy as np

import AsterFunc

SimDict = AsterFunc.GetSimDict()
Parameters = SimDict['Parameters']

'''
Transient analysis of monoblock component.
'''

def MaxChange(ResName):
    Temp_1 = CREA_CHAMP(INFO=1, NOM_CHAM='TEMP', NUME_ORDRE=(ResName.LIST_VARI_ACCES()['NUME_ORDRE'])[-1], OPERATION='EXTR', RESULTAT=ResName, TYPE_CHAM='NOEU_TEMP_R')
    Temp_2 = CREA_CHAMP(INFO=1, NOM_CHAM='TEMP', NUME_ORDRE=(ResName.LIST_VARI_ACCES()['NUME_ORDRE'])[-2], OPERATION='EXTR', RESULTAT=ResName, TYPE_CHAM='NOEU_TEMP_R')
    Resid = np.max(np.abs(np.array(Temp_1.EXTR_COMP().valeurs) - np.array(Temp_2.EXTR_COMP().valeurs)))
    DETRUIRE(CONCEPT=_F(NOM=(Temp_1,Temp_2)))
    return Resid

DEBUT(PAR_LOT = 'NON',LANG='EN')

# ==============================================================================
# Read in the mesh and define model
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=20)

Thermod = AFFE_MODELE(AFFE=_F(MODELISATION=(Parameters.Model),
                          PHENOMENE='THERMIQUE',
                          TOUT='OUI'),
                           MAILLAGE=mesh)

# ==============================================================================
# Define functions for NL material properties and assign materials to parts
DictMat = AsterFunc.MaterialProps(SimDict['MATERIAL_DIR'],Parameters.Materials.values())

BlockRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                         PROL_DROITE='CONSTANT',
                         PROL_GAUCHE='CONSTANT',
                         VALE=DictMat[Parameters.Materials['Block']]["RhoCp"])
BlockLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='CONSTANT',
                            PROL_GAUCHE='CONSTANT',
                            VALE=DictMat[Parameters.Materials['Block']]["Lambda"])
BlockMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=BlockLAM,
                                    RHO_CP=BlockRCP))

PipeRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                           PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Pipe']]["RhoCp"])
PipeLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                        PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Pipe']]["Lambda"])
PipeMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=PipeLAM,
                                   RHO_CP=PipeRCP))

TileRCP = DEFI_FONCTION(NOM_PARA='TEMP',
                        PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        VALE=DictMat[Parameters.Materials['Tile']]["RhoCp"])
TileLAM = DEFI_FONCTION(NOM_PARA='TEMP',
                           PROL_DROITE='CONSTANT',
                           PROL_GAUCHE='CONSTANT',
                           VALE=DictMat[Parameters.Materials['Tile']]["Lambda"])
TileMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=TileLAM,
                                   RHO_CP=TileRCP))

Thermat = AFFE_MATERIAU(AFFE=(_F(MATER=TileMat, GROUP_MA='Tile'),
                              _F(MATER=PipeMat, GROUP_MA='Pipe'),
                              _F(MATER=BlockMat, GROUP_MA='Block')),
                        MAILLAGE=mesh)

# ==============================================================================
# Create boundary conditions

# Thermal load. Either uniform or EM results from ERMES simulation
if Parameters.EMLoad == 'Uniform':
    EMI = AFFE_CHAR_THER(FLUX_REP=_F(FLUN=Parameters.Flux, GROUP_MA='CoilFace'),MODELE=Thermod)
elif Parameters.EMLoad == 'ERMES':
    # Read in ERMES file created during PreAster
    ERMES = np.load('{}/ERMES.npy'.format(SimDict['TMP_CALC_DIR']))
    Load_EM = []
    for i,JH in enumerate(ERMES):
        Load_EM.append((_F(GROUP_MA="_{}".format(i),SOUR=JH)))
    EMI = AFFE_CHAR_THER(SOURCE = Load_EM, MODELE=Thermod)

# Cooling due to coolant. HTC data generated during PreAster
HTdata = np.fromfile(SimDict['HTData'],dtype=float,count=-1,sep=" ")
# Change flux to negative for energy to leave sample
HTdata[1::2] = -HTdata[1::2]
PipeFlux = DEFI_FONCTION(NOM_PARA='TEMP',
                            PROL_DROITE='LINEAIRE',
                            PROL_GAUCHE='LINEAIRE',
                            VALE=HTdata)

PipeHTC = AFFE_CHAR_THER_F(FLUX_NL=_F(FLUN=PipeFlux,GROUP_MA='PipeFace'),
                             MODELE=Thermod)

# Heat transfer between joins. TCC - Thermal Contact Conductance
# As TCC goes to infiity behaviour moves towards perfect heat exchange
# Tile-Block join
if getattr(Parameters,'TileBlockTCC',None) != None:
    # Imperfect heat exchange.
    Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                            ECHANGE_PAROI=_F(GROUP_MA_1='ContactTB',
                                             GROUP_MA_2='ContactTB_double',
                                             COEF_H=Parameters.TileBlockTCC))
else:
    #Perfect heat exchange
    Con_TB = AFFE_CHAR_THER(MODELE=Thermod,
                            LIAISON_MAIL=_F(GROUP_MA_MAIT='Tile',
                                             GROUP_MA_ESCL='ContactTB'))

#Block-Pipe join
if getattr(Parameters,'BlockPipeTCC',None) != None:
    Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                            ECHANGE_PAROI=_F(GROUP_MA_1='ContactBP',
                                             GROUP_MA_2='ContactBP_double',
                                             COEF_H=Parameters.BlockPipeTCC))
else:
    Con_BP = AFFE_CHAR_THER(MODELE=Thermod,
                            LIAISON_MAIL=_F(GROUP_MA_MAIT='Block',
                                             GROUP_MA_ESCL='ContactBP'))
# List of boundary conditions applied
Loading = [_F(CHARGE=EMI),_F(CHARGE=PipeHTC),_F(CHARGE=Con_TB),_F(CHARGE=Con_BP)]

# Radiation effects
TileEmissivity = getattr(Parameters,'TileEmissivity',0)
BlockEmissivity = getattr(Parameters,'BlockEmissivity',0)
if TileEmissivity!=0 or BlockEmissivity!=0:
    Radiation = []
    if TileEmissivity:
        Radiation.append(_F(GROUP_MA='TileExternal',
                        SIGMA=5.67e-8,
                        EPSILON=TileEmissivity,
                        TEMP_EXT=Parameters.TempExt))
    if BlockEmissivity:
        Radiation.append(_F(GROUP_MA='BlockExternal',
                        SIGMA=5.67e-8,
                        EPSILON=BlockEmissivity,
                        TEMP_EXT=Parameters.TempExt))

    Radiat = AFFE_CHAR_THER(MODELE=Thermod,
                            RAYONNEMENT=Radiation)
    Loading.append(_F(CHARGE=Radiat))

# ==============================================================================
# Using Parameters.dt, list of timesteps for analysis and results to save are created
timearr, savearr = AsterFunc.Timesteps(Parameters.dt)
Timestp = DEFI_LIST_REEL(VALE=timearr)
Savestp = DEFI_LIST_REEL(VALE=savearr)

# ==============================================================================
# Thermal FEA analysis

# Create initial temperature distribution. This is needed as we use adaptive timestepping
field = CREA_CHAMP(AFFE=_F(NOM_CMP='TEMP',TOUT='OUI',VALE=Parameters.InitTemp),
                   MAILLAGE=mesh,
                   OPERATION='AFFE',
                   TYPE_CHAM='NOEU_TEMP_R')

resther = CREA_RESU(AFFE=_F(CHAM_GD=field, INST=0.0),
                    NOM_CHAM='TEMP',
                    OPERATION='AFFE',
                    TYPE_RESU='EVOL_THER')

ConvDict = getattr(Parameters,'Convergence',{})
ConvGap = ConvDict.get('Gap',0.0)
if ConvGap:
    ConvStart = ConvDict.get('Start',ConvGap)
    CheckTime = np.round(np.arange(ConvStart,timearr[-1],ConvGap),8)
    ConvIndex = [np.argmax(timearr >= t) for t in CheckTime] + [len(timearr)-1]
    #Remove duplicates from ConvIndex if timestep size is bigger than gap size
    ConvIndex = np.unique(ConvIndex).tolist()
else: ConvIndex = []

# Set default values for certain parameters
Theta = getattr(Parameters,'Theta',0.5)
Solver = getattr(Parameters,'Solver', 'MUMPS')
MaxIter = getattr(Parameters,'MaxIter',10)

# The AdaptThermal function is written to ensure that the simulation doesn't
# crash due to singularities. If an error occurs the problem timestep is cut in
# half and is attempted again. CodeAster has a routine similar to this in-built,
# however it is only available for mechanical analysis. The actual timesteps
# used for the analysis is returned.

if not ConvIndex:
    # No tracking for convergence
    AdaptSteps = AsterFunc.AdaptThermal(resther,Timestp,Loading,Thermat,Thermod,Theta,Solver,Storing = Savestp, MaxIter=MaxIter)
else:
    # Track temperature change for convergence
    ConvRes = 1e-5 # termination residual
    ConvFile = "{}/Convergence.dat".format(SimDict['ASTER']) # Convergence data file

    TempConvergence = []
    for i, EndIndex in enumerate(ConvIndex):
        NewTsteps = AsterFunc.AdaptThermal(resther,Timestp,Loading,Thermat,Thermod,Theta,Solver,
                                            Storing = Savestp, MaxIter=MaxIter, EndIndex=EndIndex)
        if i == 0: AdaptSteps = NewTsteps
        else: AdaptSteps+=NewTsteps[1:]

        Tempdiff = MaxChange(resther)
        TempConvergence.append(Tempdiff)
        np.savetxt(ConvFile,TempConvergence,fmt='%.8e', delimiter = '   ')

        if Tempdiff < ConvRes: break
    AdaptSteps = np.array(AdaptSteps).flatten()

# ==============================================================================
# Save results & timesteps used for analysis
np.savetxt('./REPE_OUT/TimeSteps.dat', AdaptSteps, fmt='%.4e', delimiter = '   ')

DEFI_FICHIER(FICHIER='./REPE_OUT/Thermal.rmed',
             TYPE='BINARY',
             UNITE=80)

IMPR_RESU(RESU=_F(RESULTAT=resther,
                  NOM_CHAM=('TEMP'),
                  NOM_CHAM_MED=('Temperature')),
          UNITE=80)

FIN()
