import sys
sys.dont_write_bytecode=True
import os
import numpy as np
import time
from Utilitai import partition

import AsterFunc
import Parameters
import PathVL

'''
Steady state version of HIVE simulation for AMAZE component. 
'''

DEBUT(PAR_LOT = 'NON',LANG='EN')

### Read in the mesh and define the model
mesh = LIRE_MAILLAGE(FORMAT='MED',NOM_MED="Sample",UNITE=20)
Thermod = AFFE_MODELE(AFFE=_F(MODELISATION=(Parameters.Model),
	                      PHENOMENE='THERMIQUE',
	                      TOUT='OUI'),
	             	      MAILLAGE=mesh)

### Define functions for NL material properties and assign materials to parts
DictMat = AsterFunc.MaterialProps(PathVL.MATERIAL_DIR,Parameters.Materials.values())

BlockRCP = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
	               PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Block']]["RhoCp"])
BlockLAM = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
		       PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Block']]["Lambda"])
BlockMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=BlockLAM, RHO_CP=BlockRCP))

PipeRCP = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
	               PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Pipe']]["RhoCp"])
PipeLAM = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
		       PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Pipe']]["Lambda"])
PipeMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=PipeLAM, RHO_CP=PipeRCP))

TileRCP = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
	               PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Tile']]["RhoCp"])
TileLAM = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='CONSTANT',
		       PROL_GAUCHE='CONSTANT',
	               VALE=DictMat[Parameters.Materials['Tile']]["Lambda"])
TileMat = DEFI_MATERIAU(THER_NL=_F(LAMBDA=TileLAM, RHO_CP=TileRCP))

Thermat = AFFE_MATERIAU(AFFE=(_F(MATER=TileMat, GROUP_MA='Tile'),_F(MATER=PipeMat, GROUP_MA='Pipe'),_F(MATER=BlockMat, GROUP_MA='Block')),
	                MAILLAGE=mesh)

### Create BCs
## Coil BC
if Parameters.EMLoad == 'Uniform':
	EMI = AFFE_CHAR_THER(FLUX_REP=_F(FLUN=Parameters.Flux, GROUP_MA='CoilFace'),MODELE=Thermod)
elif Parameters.EMLoad == 'ERMES':
	# Read in ERMES file created during PreAster
	ERMES = np.load('{}/ERMES.npy'.format(PathVL.TMP_CALC_DIR))
	Load_EM = []
	for i,JH in enumerate(ERMES):
		Load_EM.append((_F(GROUP_MA="_{}".format(i),SOUR=JH)))
	EMI = AFFE_CHAR_THER(SOURCE = Load_EM, MODELE=Thermod)

## Pipe BC - Read in HTC generated in PeAster and apply to pipe surface
PipeHTCdat = np.fromfile('{}/HTC.dat'.format(PathVL.TMP_CALC_DIR),dtype=float,count=-1,sep=" ")
HTC_Temps, HTC_Values = PipeHTCdat[::2], PipeHTCdat[1::2]
HTC_Temps = np.hstack((HTC_Temps[0]-1,HTC_Temps,HTC_Temps[-1]+1))
HTC_Values = np.hstack((HTC_Values[0],HTC_Values,HTC_Values[-1]))

PipeFluxdat = [None]*(len(HTC_Temps)*2)
PipeFluxdat[::2], PipeFluxdat[1::2] = HTC_Temps, -HTC_Values*(HTC_Temps - Parameters.Coolant['Temperature'])

PipeFlux = DEFI_FONCTION(NOM_PARA='TEMP',
	               PROL_DROITE='LINEAIRE',
		       PROL_GAUCHE='LINEAIRE',
	               VALE=PipeFluxdat)

PipeHTC = AFFE_CHAR_THER_F(FLUX_NL=_F(FLUN=PipeFlux,GROUP_MA=('PipeFace')),
			  MODELE=Thermod)

### Loads
Loading = (_F(CHARGE=EMI),_F(CHARGE=PipeHTC))

### Thermal analysis
## Provide default values for certain parameters
Solver = getattr(Parameters,'Solver', 'MUMPS')
MaxIter = getattr(Parameters,'MaxIter',50)

resther = THER_NON_LINE(
			CHAM_MATER=Thermat,
			EXCIT=Loading,
			MODELE=Thermod,
			SOLVEUR=_F(METHODE=Solver),
			CONVERGENCE=_F(ITER_GLOB_MAXI=MaxIter,),)

## Save the results and the full list of actual timesteps used for the simulation
DEFI_FICHIER(FICHIER='./REPE_OUT/Thermal.rmed', TYPE='BINARY', UNITE=80)
IMPR_RESU(RESU=_F(RESULTAT=resther,
                  NOM_CHAM=('TEMP'),
                  NOM_CHAM_MED=('Temperature')),
		  UNITE=80)

FIN()
