import sys
sys.dont_write_bytecode=True
import numpy as np
import time
from Utilitai import partition

import AsterFunc
import Parameters
import PathVL

DEBUT(PAR_LOT = 'NON',LANG='EN')

##### Read in the mesh and define the model #####
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=20)

model = AFFE_MODELE(AFFE=_F(MODELISATION=('3D', ),
                            PHENOMENE='MECANIQUE',
                            TOUT='OUI'),
                    MAILLAGE=mesh)

##### Create dictionary of material properties and assign materials to parts #####
DictMat = AsterFunc.MaterialProps(PathVL.MATERIAL_DIR, Parameters.Materials)

Mat = DEFI_MATERIAU(ELAS=_F(E=DictMat[Parameters.Materials]["Youngs"][1],
                            NU=DictMat[Parameters.Materials]["PoisRat"][1]))

fieldmat = AFFE_MATERIAU(AFFE=_F(MATER=(Mat), TOUT='OUI'),
                         MODELE=model)

'''
Boundary Conditions

Constraint: Adaption of the 3-2-1 method. Fixing the face in X removed the transitional DF in X and rotational DF in Y and Z. 
Fixing 1 corner node in Y and Z removes the transitional DF in Y and Z, while fixing the final node in Y removes the final rotational DF. 

Loading: Either a constant force or constant displacement can be chosen. The input for the force is corrected with regards to the loading 
area due to the way CA applies forces to the face.
'''

Fix321 = AFFE_CHAR_MECA(FACE_IMPO=_F(DX=0.0, GROUP_MA=('Constrain', )),
		       DDL_IMPO=(_F(DY=0.0, DZ=0.0, GROUP_NO=('Constrain3', )), _F(DY=0.0, GROUP_NO=('Constrain2', ))),
                       MODELE=model)

# Constant Force simulation
Force = Parameters.Load.get('Force', None)
if Force:
	# Use Area to correct the force applied (CodeAster treats it as a pressure so we divide by the area)
	LoadFace = AsterFunc.BCinfo(mesh, Group = 'Load')[0]
	LoadArea = sum(LoadFace)
	CorrForce = Force/LoadArea

	Force = AFFE_CHAR_MECA(FORCE_FACE=_F(FX=CorrForce, GROUP_MA='Load'),
			       MODELE=model)

	Loading = (_F(CHARGE=Fix321), _F(CHARGE=Force))

	resFrc = MECA_STATIQUE(CHAM_MATER=fieldmat,
			       EXCIT=Loading,
			       MODELE=model)

	# Get stresses
	resFrc = CALC_CHAMP(reuse=resFrc,
		            CONTRAINTE=('SIEF_ELNO', 'SIEF_NOEU'),
			    FORCE='FORC_NODA',
		            RESULTAT=resFrc)

	DEFI_FICHIER(FICHIER='./REPE_OUT/{}.rmed'.format(Parameters.ResName[0]), UNITE=80)
	IMPR_RESU(RESU=_F(RESULTAT=resFrc), UNITE=80)

# Constant Displacement simulation
Displacement = Parameters.Load.get('Displacement', None)
if Displacement:
	Disp = AFFE_CHAR_MECA(FACE_IMPO=_F(DX=Displacement, GROUP_MA='Load'),
		              MODELE=model)

	Loading = (_F(CHARGE=Fix321), _F(CHARGE=Disp))

	resDsp = MECA_STATIQUE(CHAM_MATER=fieldmat,
			       EXCIT=Loading,
			       MODELE=model)

	# Get stresses
	resDsp = CALC_CHAMP(reuse=resDsp,
		            CONTRAINTE=('SIEF_ELNO', 'SIEF_NOEU'),
			    FORCE='FORC_NODA',
		            RESULTAT=resDsp)

	DEFI_FICHIER(FICHIER='./REPE_OUT/{}.rmed'.format(Parameters.ResName[1]), UNITE=81)
	IMPR_RESU(RESU=_F(RESULTAT=resDsp), UNITE=81)


FIN()
