import sys
sys.dont_write_bytecode=True
import numpy as np
import time
from Utilitai import partition

import AsterFunc
import Parameters
import PathVL

DEBUT(PAR_LOT = 'NON',LANG='EN')

##### Read in the mesh and define the model #####
mesh = LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=20)

model = AFFE_MODELE(AFFE=_F(MODELISATION=('3D', ),
                            PHENOMENE='MECANIQUE',
                            TOUT='OUI'),
                    MAILLAGE=mesh)

##### Create dictionary of material properties and assign materials to parts #####
DictMat = AsterFunc.MaterialProps(PathVL.MATERIAL_DIR, Parameters.Materials)

Mat = DEFI_MATERIAU(ELAS=_F(E=DictMat[Parameters.Materials]["Youngs"][1],
                            NU=DictMat[Parameters.Materials]["PoisRat"][1]))

fieldmat = AFFE_MATERIAU(AFFE=_F(MATER=(Mat), TOUT='OUI'),
                         MODELE=model)

'''
Boundary Conditions

Constraint: Adaption of the 3-2-1 method. Fixing the face in X removed the transitional DoF in X and rotational DoF in Y and Z.
Fixing 1 corner node in Y and Z removes the transitional DoF in Y and Z, while fixing the final node in Y removes the final rotational DoF.

Loading: A constant force and/or constant displacement can be chosen. The input for the force is corrected with regards to the loading
area due to the way CA applies forces to the face.
'''

Fix321 = AFFE_CHAR_MECA(FACE_IMPO=_F(DX=0.0, GROUP_MA=('Constrain', )),
		                DDL_IMPO=(_F(DY=0.0, DZ=0.0, GROUP_NO=('Constrain3', )),
                                  _F(DY=0.0, GROUP_NO=('Constrain2', ))),
                        MODELE=model)

DEFI_FICHIER(FICHIER='./REPE_OUT/TensileTest.rmed', UNITE=80)

# Constant Force simulation
Force = getattr(Parameters,'Force',None)
if Force:
	# Use Area to correct the force applied (CodeAster treats it as a pressure so we divide by the area)
	LoadFace = AsterFunc.BCinfo(mesh, Group = 'Load')[0]
	LoadArea = sum(LoadFace)
	CorrForce = Force/LoadArea

	LdFrc = AFFE_CHAR_MECA(FORCE_FACE=_F(FX=CorrForce, GROUP_MA='Load'),
			               MODELE=model)

	Loading = (_F(CHARGE=Fix321), _F(CHARGE=LdFrc))

	Force = MECA_STATIQUE(CHAM_MATER=fieldmat,
			              EXCIT=Loading,
			              MODELE=model)

	# Get stresses
	CALC_CHAMP(reuse=Force,
		       CONTRAINTE=('SIEF_NOEU'),
		       RESULTAT=Force)

	IMPR_RESU(RESU=_F(RESULTAT=Force,
                      NOM_CHAM=('DEPL','SIEF_NOEU'),
                      NOM_CHAM_MED=('Force_Displacement','Force_Stress')),
              UNITE=80)

# Constant Displacement simulation
Displacement = getattr(Parameters,'Displacement',None)
if Displacement:
	LdDisp = AFFE_CHAR_MECA(FACE_IMPO=_F(DX=Displacement, GROUP_MA='Load'),
		                    MODELE=model)

	Loading = (_F(CHARGE=Fix321), _F(CHARGE=LdDisp))

	Disp = MECA_STATIQUE(CHAM_MATER=fieldmat,
			             EXCIT=Loading,
			             MODELE=model)

	# Get stresses
	CALC_CHAMP(reuse=Disp,
		       CONTRAINTE=('SIEF_ELNO', 'SIEF_NOEU'),
			   FORCE='FORC_NODA',
		       RESULTAT=Disp)

	IMPR_RESU(RESU=_F(RESULTAT=Disp,
                      NOM_CHAM=('DEPL','SIEF_NOEU'),
                      NOM_CHAM_MED=('Disp_Displacement','Disp_Stress')),
              UNITE=80)

FIN()
