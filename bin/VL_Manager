#!/bin/bash
USER_HOME=$(eval echo ~${SUDO_USER})
if [ -f $USER_HOME/.VLprofile ]; then source $USER_HOME/.VLprofile; fi
BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

export MPLBACKEND='Agg' # temporary bug fix

usage() {
  echo
  echo "Usage:"
#  echo " $0 [ -f "'$FPATH'" ]"
  echo " VirtualLab [ -f "'$FPATH'" ]"
  echo
  echo "A script to run VirtualLab simulations."
  echo
  echo "Options:"
  echo "   -f <"'$FPATH'">       Where "'$FPATH'" is the path of the python run file."
  echo "   -k <Name=Value>   Ovewrite the value specified for variables/keyword argument Name specified in the run file."
  echo "   -h                Display this help menu."
  echo
  echo "Default behaviour is to exit if no "'$FPATH'" is given"
  echo
}
exit_abnormal() {
  usage
  exit 1
}
if [[ $# == 0 ]]; then
  echo
  echo "Error: VirtualLab requires an option."
  exit_abnormal
fi
while getopts ":f:h:k:P:" options; do
  case "${options}" in
    k)
      Args="$Args ${OPTARG}"
      ;;
    f)
      CONFIG_FNAME=${OPTARG}
      if test ! -f "$CONFIG_FNAME" ; then
        echo 'The file "'$CONFIG_FNAME'" does not exist.'
        exit 1
      fi
      ;;
    h)  # display Help
      exit_abnormal
      ;;
    P) # port number
      export VL_TCP_PORT=${OPTARG}
      ;;
    :)  # If expected argument omitted:
      echo "Error: Option -${OPTARG} requires an argument."
      exit_abnormal
      ;;
    *)  # If unknown (any other) option:
      echo "Error: Invalid option -$OPTARG" >&2
      exit_abnormal
      ;;

  esac
done
shift $(($OPTIND - 1))
if [[ $@ ]]; then
 echo
 echo "Error: Too many arguments were entered, please check usage and flags."
 echo "Remaining arguments: \"$@\"."
 exit_abnormal
fi

### Read in VLconfig which contains $VL_DIR
source $BIN_DIR/../VLconfig.py
export PYTHONPATH="$VL_DIR:${PYTHONPATH}"
### Check if Conda is installed
search_var=anaconda*
conda_dir=$(eval find $USER_HOME -maxdepth 1 -type d -name "$search_var")
if [[ -f $conda_dir/bin/conda ]]; then
  eval "$($conda_dir/bin/conda shell.bash hook)"
else
  search_var=miniconda*
  conda_dir=$(eval find $USER_HOME -maxdepth 1 -type d -name "$search_var")
  if [[ -f $conda_dir/bin/conda ]]; then
    eval "$($conda_dir/bin/conda shell.bash hook)"
  fi
fi

### If conda found activate environment
### If no conda, prerequisites are assumed installed in local python
if hash conda 2>/dev/null; then
  CONDAENV="$(basename -- $VL_DIR)"
  conda activate $CONDAENV
  #conda info --envs
fi

### Prefix program filename with "./" such that it executes
CONFIG_FNAME_exe=$(dirname $CONFIG_FNAME)"/./"$(basename $CONFIG_FNAME)

### Check whether RunFile is executable
if [[ -x $CONFIG_FNAME_exe ]]; then
  $CONFIG_FNAME_exe $Args
else
  echo
  echo 'The Run File "'$CONFIG_FNAME'" is not executable.'
  echo "You must first make it executable by running the following command,"
  echo "then re-running VirtualLab."
  echo
  echo "  sudo chmod +x $CONFIG_FNAME"
  echo
fi
