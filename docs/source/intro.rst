Introduction
============

VirtualLab (VL) is a python package which enables the user to run Finite Element (FE) simulations completely via the command line. The pre and post processing is carried out using the software SALOME, while the FE solver CodeAster is used for the simulation. While this package has been written for command line use some capabilites have been included to use the GUI for debugging and training.

Setup
*****

To use VirtualLab there are a few things which must be set up. The first is that you have both SALOME and CodeAster installed on your computer. Once this is done you need to add the SALOME directory to your path so that salome can be opened by just typing ‘salome’ in a terminal window. Talk to Llion

Layout
******

VirtualLab contains three essential directories needed for running any simulation; ‘Scripts’, ‘Materials’ and ‘Input’. A directory named ‘Output’ will be created alongside these containing all of the meshes and simulation results .The file ‘Run.py’ is used to launch simulations. For now ignore the RunFiles directory. 

Scripts
#######

This directory contains all of the scripts needed to set up VirtualLab, the SALOME scripts and CodeAster command files. The sub-directory ‘Common’ contains everything needed to set-up a study, such as creating directories and inerfacing with SALOME and CodeAster. There is also a sub-directory for each simulation type (which is currently Tensile, LFA and HIVE). Inside each of these sub-directories is the relevant SALOME and CodeAster files to run that specific simulation. Each has a PreProc, Aster and PostProc directory containing the relevant scripts. This directory also contains other simulation-specific subdirectories, I.e. ‘Laser’ for LFA which contains different laser pulse profiles. 

Materials
#########

This directory contains the material properties which will be used for FE simulations. The sub-directories are different materials, each of which contain material properties. Some materials are non-linear with temperature dependence. 

Input
#####

The Input directory contains the parameters which will be used for running simulations, such as dimensions to create meshes and boundary conditions and materials for FE simulations. Input has a sub-directory for each Simulation, and within each of those you will find sub-directories for different Projects (this will be explained more in the next section). 

In the file Run.py’ you will notice there are a few variables which need to be defined to run VirtualLab; ‘Simulation’, ‘Project’, ‘StudyName’, ‘Parameters_Master’ and ‘Parameters_Var’.

Simulation
##########

This indicated the type of simulation which will be run; Tensile, LFA or HIVE. A directory of the Simulation will be created in the Output directory.

Project
#######

This is a sub directory of Simulation to specify the project you are working on, i.e. here you could specify a type of component you are testing. In this directory a sub-directory $STUDY_NAME will be created to store simulation results and a sub-directory ‘Meshes’ where all the meshes for this project will be saved. 

StudyName
#########

As previously mentioned a sub-directory of Project where the simulations results will be stored. This is useful to group together simulations, for example if you are testing out different magnitude of loads, you could name this ‘LoadingAnalysis’.
Parameters_Master & Parameters_Var –  These files are used to create parameter files containing all the necessary values to create a mesh/run a simulation. Parameters_Master defines the master parameter file which will be used for simulations. This file contains all of the variables  required to create a mesh and run a simulation and is sufficient without Parameters_Var. The Parameters_Var file is used in conjunction with Parameters_Master to create multiple parameter files, which enables running multiple simulations concurrently. If Parameters_Var is set to None a single parameter file is created (a copy of Parameters_Master). Both Parameters_Master and Parameters_Var can be found in Input/$SIMULATION/$PROJECT

You will also notice when the class is initialised a key-word argument ‘mode’ is passed – this dictates how much information is printed in the terminal. There are 3 different options available; headless (default), continuous and interactive. Interactive will output all commands in to the terminal, continuous will write the output to a file as it is generated, and headless will write the output in to the file at the end of the process. The output for the meshing stage can be found in the ‘Meshes’ directory, while the output for each CodeAster simulation can be found in the ‘Aster’ directory for each specific Study. For the below tasks it is advised to keep the mode as ‘interactive’ so that you can see the outputs generated by VL easily. 
